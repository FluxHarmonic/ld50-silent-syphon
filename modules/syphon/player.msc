(define-module (syphon player)
  (import (mesche math)
          (substratic input)
          (substratic window)
          (substratic physics)
          (substratic renderer)
          (syphon input)
          (syphon weapon)))

(define-record-type player
  (fields x y
          vel-x vel-y
          state
          sphere
          weapon
          fire-time
          shield-amount
          energy-amount))

(define (create-player window) :export
  (make-player :x (- (/ (window-width window) 2) (/ player-size 2))
               :y (- (window-height window) 300)
               :vel-x 0
               :vel-y 0
               :state 'alive
               :sphere (make-sphere player-x player-y (/ player-size 2))
               :weapon (make-weapon :damage 10
                                    :bullet-speed 700
                                    :fire-rate 0.5
                                    :energy-cost 5)
               :fire-time 0
               :shield-amount 100
               :energy-amount 100))

;; Define some game state
(define player-ship-color (rgb 100 100 255))
(define player-size 100 :export)
(define player-move-speed 500)            ; Pixels per second
(define player-energy-depletion 1)

(define (player-fire-weapon player weapon new-bullet-func time-delta)
  (if (<= (player-fire-time player) 0)
      ;; TODO: Why is there a heap overflow when this is a `begin`?
      (let ((foo t))
        ;; Delay the next fire by the fire rate
        (player-fire-time-set! player (weapon-fire-rate weapon))

        ;; Subtract the energy cost of firing the weapon
        (player-energy-amount-set! player
                                   (- (player-energy-amount player)
                                      (weapon-energy-cost weapon)))

        ;; Fire the weapon and save the new bullet
        (new-bullet-func
         (fire-weapon (player-weapon player)
                      (player-x player)
                      (player-y player)
                      -1
                      time-delta
                      'player))))
  (player-fire-time-set! player (- (player-fire-time player)
                                   time-delta)))

(define (read-controller player controller time-delta)
  ;; Look at controller state to change velocity
  (let ((neg-move (* -1 player-move-speed)))
    (if (controller-up controller)
        (player-vel-y-set! player neg-move)
        (if (controller-down controller)
            (player-vel-y-set! player player-move-speed)
            (player-vel-y-set! player 0)))
    (if (controller-left controller)
        (player-vel-x-set! player neg-move)
        (if (controller-right controller)
            (player-vel-x-set! player player-move-speed)
            (player-vel-x-set! player 0)))))

(define (deplete-player player time-delta)
  (player-energy-amount-set! player
                             (- (player-energy-amount player)
                                (* player-energy-depletion time-delta))))

(define player-move-depletion 0.005)

(define (move-player player time-delta)
  ;; Update player position
  (if (not (equal? 0 (player-vel-x player)))
      (let ((move-x (* (player-vel-x player)
                       time-delta)))
        (player-energy-amount-set! player
                                   (- (player-energy-amount player)
                                      (abs (* move-x player-move-depletion))))
        (player-x-set! player
                       (+ (player-x player) move-x))))

  (if (not (equal? 0 (player-vel-y player)))
      (let ((move-y (* (player-vel-y player)
                       time-delta)))

        (player-energy-amount-set! player
                                   (- (player-energy-amount player)
                                      (abs (* move-y player-move-depletion))))
        (player-y-set! player (+ (player-y player)
                                 move-y))))
  ;; Set the sphere center
  (sphere-center-x-set! (player-sphere player) (player-x player))
  (sphere-center-y-set! (player-sphere player) (player-y player)))

(define (update-player player controller new-bullet-func time-delta) :export
  ;; Is the player still alive
  (if (> (player-shield-amount player) 0)
      (begin
        ;; Deplete energy
        (deplete-player player time-delta)

        ;; Read controller state
        (read-controller player controller time-delta)

        ;; Are we out of energy?
        (if (< (player-energy-amount player) 1)
            (begin
              (player-state-set! player 'depleted)))

        ;; Move the player based on velocity
        (move-player player time-delta)

        ;; Fire the weapon if it's time
        (if (and (not (controller-siphon controller))
                 (controller-fire controller))
            ;; Fire the weapon
            (player-fire-weapon player
                                (player-weapon player)
                                new-bullet-func
                                time-delta)

            ;; Keep ticking down the fire time
            (if (> (player-fire-time player) 0)
                (player-fire-time-set! player (max 0
                                                   (- (player-fire-time player)
                                                      time-delta))))))

      ;; We died
      (player-state-set! player 'died)))

(define (render-player renderer player) :export
  (renderer-draw-rect renderer
                      (- (player-x player) (/ player-size 2))
                      (- (player-y player) (/ player-size 2))
                      player-size player-size
                      player-ship-color))
