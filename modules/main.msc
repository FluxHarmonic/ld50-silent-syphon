(define-module (syphon main)
  (import (mesche array)
          (mesche math)
          (mesche list)
          (mesche time)
          (mesche string)
          (substratic font)
          (substratic input)
          (substratic engine)
          (substratic window)
          (substratic physics)
          (substratic texture)
          (substratic renderer)
          (syphon enemy)
          (syphon player)
          (syphon weapon)
          (syphon bullet)
          (syphon collision)))

(define window (window-create 1280 720 "Silent Syphon"))
(define input-state (input-init window))
(define renderer (renderer-create window))

;; Load game assets
(define small-font (font-load-file "assets/fonts/Thintel.ttf" 75))
(define result-font (font-load-file "assets/fonts/Thintel.ttf" 250))
(define prompt-font (font-load-file "assets/fonts/Thintel.ttf" 125))

(define screen-scale 4.0)

;; Show the window
(window-show window)

;; Get an fps counter
(define current-fps (make-fps-counter))

;;; -- Game --

(define score-scroll-speed 150)
(define max-level-time 180)

(define-record-type game
  (fields state
          player
          score-total
          score-current
          level-time
          enemies
          bullets))

(define (initialize-game)
  (make-game :state 'playing
             :player (create-player window)
             :score-total 0
             :score-current 0
             :level-time 0
             :enemies '()
             :bullets '()))

(define (end-game game state)
  (game-state-set! game state)
  (if (equal? state 'died)
      (begin
        (set! result-text you-died-text)
        (set! result-width you-died-width))
      (begin
        (set! result-text depleted-text)
        (set! result-width depleted-width))))

;;; -- HUD --

(define hud-width 300)
(define meter-height 300)
(define hud-color (rgb 92 87 85))
(define shield-meter-color (rgb 158 252 255))
(define energy-meter-color (rgb 255 105 41))

(define (update-hud game time-delta)
  (if (< (game-score-current game)
         (game-score-total game))
      (game-score-current-set! game
                               (min (game-score-total game)
                                    (+ (game-score-current game)
                                       (* score-scroll-speed time-delta))))))

(define (render-hud renderer game player window)
  (renderer-draw-rect renderer
                      (- (window-width window) hud-width)
                      0
                      (window-width window)
                      (window-height window)
                      hud-color)

  (let ((shield-meter-height (* (/ (player-shield-amount player) 100) meter-height)))
    (renderer-draw-rect renderer
                        (- (window-width window) 190)
                        (- (- (window-height window) 100)
                           shield-meter-height)
                        40
                        shield-meter-height
                        shield-meter-color))

  (let ((energy-meter-height (* (/ (player-energy-amount player) 100) meter-height)))
    (renderer-draw-rect renderer
                        (- (window-width window) 135)
                        (- (- (window-height window) 100)
                           energy-meter-height)
                        40
                        energy-meter-height
                        energy-meter-color))

  ;; Draw the score
  (render-text renderer
               small-font
               (string-append "Score: " (number->string (game-score-current game)))
               (- (window-width window) 270)
               150))

;;; -- Input --

(define (handle-prompt-input input-event)
  (if (input-event-key-down? input-event)
      (if (equal? (input-event-key-code input-event) input-key-code-y)
          (display "PLAY AGAIN!\n")
          (if (equal? (input-event-key-code input-event) input-key-code-n)
              (display "GO BACK TO MENU!\n")))))

(define (handle-input-events game)
  (let next-event ((input-event (input-event-take input-state)))
    (if input-event
        (begin
          (handle-player-input (game-player game) input-event)
          (next-event (input-event-take input-state))))))

;;; -- Game Loop --

(define current-game (initialize-game))

(define (game-updater time-delta)
  (if (not (window-needs-close? window))
      (begin
        ;; Count how much time we've been in the level
        (game-level-time-set! current-game
                              (+ (game-level-time current-game)
                                 time-delta))

        ;; If we're still playing, update game entities
        (if (equal? (game-state current-game) 'playing)
            (begin
              ;; Update the player
              (handle-input-events current-game)
              (update-player (game-player current-game)
                             (lambda (bullet)
                               (game-bullets-set! current-game
                                                  (cons bullet
                                                        (game-bullets current-game))))
                             time-delta)

              (if (not (equal? (player-state (game-player current-game))
                               'alive))
                  (end-game current-game (player-state (game-player current-game))))

              ;; Update bullets
              (game-bullets-set! current-game
                                 (update-bullets (game-bullets current-game)
                                                 time-delta))

              ;; Spawn and update enemies
              (game-enemies-set! current-game
                                 (spawn-enemies (game-enemies current-game)
                                                (game-level-time current-game)
                                                max-level-time
                                                time-delta
                                                window))
              (game-enemies-set! current-game
                                 (update-enemies (game-enemies current-game)
                                                 (lambda (bullet)
                                                   (game-bullets-set! current-game
                                                                      (cons bullet
                                                                            (game-bullets current-game))))
                                                 time-delta
                                                 window))

              ;; Check for collisions
              (check-collisions (game-player current-game)
                                (game-enemies current-game)
                                (game-bullets current-game)
                                (lambda (enemy)
                                  ;; Give the player some score
                                  (game-score-total-set! current-game
                                                         (+ (game-score-total current-game)
                                                            (enemy-score enemy)))))

              ;; Update the HUD
              (update-hud current-game time-delta))

            ;; Respond to input to the prompt
            (handle-input-events current-game))

        ;; Make sure we don't exit the game loop
        t)))

(define you-died-text "YOU DIED")
(define you-died-width (font-text-width result-font you-died-text))

(define depleted-text "DEPLETED")
(define depleted-width (font-text-width result-font depleted-text))

(define prompt-text "Play Again? (Y/N)")
(define prompt-width (font-text-width prompt-font prompt-text))

(define result-text nil)
(define result-width nil)

(define (game-renderer renderer)
  ;; Clear the screen
  (renderer-clear renderer 0 0 0)

  ;; Render the bullets
  (render-bullets renderer (game-bullets current-game))

  ;; Render the player's ship
  (render-player renderer (game-player current-game))

  ;; Render the enemies
  (render-enemies renderer (game-enemies current-game))

  ;; Render the HUD
  (render-hud renderer
              current-game
              (game-player current-game)
              window)

  ;; Display the result string
  (if (not (equal? (game-state current-game)
                   'playing))
      (begin
        (render-text renderer
                     result-font
                     result-text
                     (- (/ (- (window-width window) hud-width) 2)
                        (/ result-width 2))
                     500)
        (render-text renderer
                     prompt-font
                     prompt-text
                     (- (/ (- (window-width window) hud-width) 2)
                        (/ result-width 2))
                     650)))

  ;; Render the FPS
  (let ((fps (current-fps)))
    (if fps
        (render-text renderer
                     small-font
                     (string-append "FPS: " (number->string fps 3))
                     (- (window-width window) 220)
                     60))))

;; This will run the game functions until the updater returns nil
(run-engine-loop :renderer renderer
                 :update-func game-updater
                 :render-func game-renderer)
